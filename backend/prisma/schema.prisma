// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  USER
  ADMIN
}

enum SEX {
  M
  F
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password_hash String
  full_name     String
  social_name   String?
  cpf           String   @unique
  sex           SEX
  date_of_birth DateTime
  role          ROLE     @default(USER)
  created_at    DateTime @default(now())

  cellphone    Cellphone @relation(fields: [cellphone_id], references: [id])
  cellphone_id String    @unique

  city    City   @relation(fields: [city_id], references: [id])
  city_id String

  state    State  @relation(fields: [state_id], references: [id])
  state_id String

  @@map("users")
}

model Cellphone {
  id     String @id @default(uuid())
  ddd    String
  number String
  User   User[]

  @@map("cellphones")
}

model State {
  id   String @id @default(uuid())
  name String @unique

  cities       City[]
  users        User[]
  MovieTheater MovieTheater[]

  @@map("states")
}

model City {
  id   String @id @default(uuid())
  name String

  state    State  @relation(fields: [state_id], references: [id])
  state_id String

  users        User[]
  MovieTheater MovieTheater[]

  @@map("cities")
}

model MovieTheater {
  id         String   @id @default(uuid())
  name       String   @unique
  street     String
  number     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  state    State  @relation(fields: [state_id], references: [id])
  state_id String

  city    City   @relation(fields: [city_id], references: [id])
  city_id String

  Room   Room[]
  movies Movie[]
}

model Room {
  id     String @id @default(uuid())
  number String

  movieTheater     MovieTheater @relation(fields: [movie_theater_id], references: [id], onDelete: Cascade)
  movie_theater_id String

  seats        Seat[]
  technologies Technology[]

  @@map("rooms")
}

model Seat {
  id     Int     @id @default(autoincrement())
  row    String
  column String
  exists Boolean
  type   String

  room    Room   @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id String

  @@map("seats")
}

model Technology {
  id   String @id @default(uuid())
  name String @unique

  rooms Room[]

  @@map("technologies")
}

model Movie {
  id            String   @id @default(uuid())
  tmdb_id       Int      @unique
  name          String
  original_name String
  synopsis      String
  duration      Int
  release_date  DateTime
  directors     String?
  poster_path   String
  max_date      DateTime

  genres        Genre[]
  movieTheaters MovieTheater[]

  @@map("movies")
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String

  movies Movie[]

  @@map("genres")
}
